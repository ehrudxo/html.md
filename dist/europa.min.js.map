{"version":3,"file":null,"sources":["../node_modules/europa-core/src/transformation.js","../node_modules/europa-core/src/transformer.js","../node_modules/europa-core/src/plugin/plugin.js","../node_modules/europa-core/src/plugin/predefined/anchor.js","../node_modules/europa-core/src/plugin/predefined/block-quote.js","../node_modules/europa-core/src/plugin/predefined/break.js","../node_modules/europa-core/src/plugin/predefined/code.js","../node_modules/europa-core/src/plugin/predefined/strong.js","../node_modules/europa-core/src/plugin/predefined/definition-term.js","../node_modules/europa-core/src/plugin/predefined/details.js","../node_modules/europa-core/src/plugin/predefined/emphasis.js","../node_modules/europa-core/src/plugin/predefined/empty.js","../node_modules/europa-core/src/plugin/predefined/heading.js","../node_modules/europa-core/src/plugin/predefined/horizontal-rule.js","../node_modules/europa-core/src/plugin/predefined/image.js","../node_modules/europa-core/src/utilities.js","../node_modules/europa-core/src/plugin/predefined/list-item.js","../node_modules/europa-core/src/plugin/predefined/ordered-list.js","../node_modules/europa-core/src/plugin/predefined/paragraph.js","../node_modules/europa-core/src/plugin/predefined/preformatted.js","../node_modules/europa-core/src/plugin/preset/preset.js","../node_modules/europa-core/src/plugin/predefined/quote.js","../node_modules/europa-core/src/plugin/predefined/unordered-list.js","../node_modules/europa-core/src/plugin/preset/default.js","../node_modules/europa-core/src/europa.js","../node_modules/europa-core/src/service/window-service.js","../src/service/native-window-service.js","../src/index.js"],"sourcesContent":["/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Contains contextual information for a single transformation process.\n *\n * @public\n */\nclass Transformation {\n\n  /**\n   * Creates an instance of {@link Transformation} for the specified <code>transformer</code> and using the\n   * <code>options</code> provided.\n   *\n   * @param {Transformer} transformer - the {@link Transformer} responsible for this transformation\n   * @param {Transformation~Options} options - the options to be used\n   * @public\n   */\n  constructor(transformer, options) {\n    /**\n     * The {@link Transformation} responsible for this {@link Transformation}.\n     *\n     * @public\n     * @type {Transformer}\n     */\n    this.transformer = transformer\n\n    /**\n     * The options for this {@link Transformation}.\n     *\n     * @public\n     * @type {Transformation~Options}\n     */\n    this.options = options\n\n    /**\n     * Indicates whether the buffer is at the start of the current line.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atLeft = true\n\n    /**\n     * Indicates whether any white space should be removed from the start of the next output.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atNoWhiteSpace = true\n\n    /**\n     * Indicates whether the buffer is at the start of a paragraph.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atParagraph = true\n\n\n    /**\n     * The transformation output buffer to which the Markdown will be written.\n     *\n     * @public\n     * @type {string}\n     */\n    this.buffer = ''\n\n    /**\n     * Indicates whether the buffer is currently within a code block.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inCodeBlock = false\n\n    /**\n     * Indicates whether the buffer is currently within an ordered list.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inOrderedList = false\n\n    /**\n     * Indicates whether the buffer is currently within a preformatted block.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inPreformattedBlock = false\n\n    /**\n     * The last string to be output next to the buffer.\n     *\n     * @public\n     * @type {string}\n     */\n    this.last = null\n\n    /**\n     * The start of the current line.\n     *\n     * @public\n     * @type {string}\n     */\n    this.left = '\\n'\n\n    /**\n     * The depth of nested lists.\n     *\n     * @public\n     * @type {number}\n     */\n    this.listDepth = 0\n\n    /**\n     * The one-based index for the current list item within the current list.\n     *\n     * @public\n     * @type {number}\n     */\n    this.listIndex = 1\n\n    /**\n     * The current stack of plugins.\n     *\n     * @public\n     * @type {Plugin[]}\n     */\n    this.pluginStack = []\n\n    /**\n     * Indicates whether transformation of the children of the current element should be skippped.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.skipChildren = false\n\n    /**\n     * The current document for this {@link Transformation}.\n     *\n     * @private\n     * @type {HTMLDocument}\n     */\n    this._document = transformer.document\n\n    /**\n     * The current element for this {@link Transformation}.\n     *\n     * @private\n     * @type {Element}\n     */\n    this._element = null\n\n    /**\n     * The name of the tag for the current element for this {@link Transformation}.\n     *\n     * @private\n     * @type {string}\n     */\n    this._tagName = null\n\n    /**\n     * The current window for this {@link Transformation}.\n     *\n     * @private\n     * @type {Window}\n     */\n    this._window = transformer.window\n  }\n\n  /**\n   * Appends the last output string to the buffer and then queues the specified <code>string</code> to be output.\n   *\n   * @param {string} string - the string to be appended\n   * @return {Transformation} A reference to this {@link Transformation} for chaining purposes.\n   * @public\n   */\n  append(string) {\n    if (this.last != null) {\n      this.buffer += this.last\n    }\n\n    this.last = string\n\n    return this\n  }\n\n  /**\n   * Appends a paragraph to the output buffer.\n   *\n   * @return {Transformation} A reference to this {@link Transformation} for chaining purposes.\n   * @public\n   */\n  appendParagraph() {\n    if (this.atParagraph) {\n      return this\n    }\n\n    if (!this.atLeft) {\n      this.append(this.left)\n\n      this.atLeft = true\n    }\n\n    this.append(this.left)\n\n    this.atNoWhiteSpace = true\n    this.atParagraph = true\n\n    return this\n  }\n\n  /**\n   * Outputs the specified <code>string</code> to the buffer.\n   *\n   * Optionally, <code>string</code> can be \"cleaned\" before being output. Doing so will replace any certain special\n   * characters as well as some white space.\n   *\n   * @param {string} string - the string to be output\n   * @param {boolean} [clean=false] - <code>true</code> to clean <code>string</code>; otherwise <code>false</code>\n   * @return {Transformation} A reference to this {@link Transformation} for chaining purposes.\n   * @public\n   */\n  output(string, clean) {\n    if (!string) {\n      return this\n    }\n\n    string = string.replace(/\\r\\n/g, '\\n')\n\n    if (clean) {\n      string = string.replace(/\\n([ \\t]*\\n)+/g, '\\n')\n        .replace(/\\n[ \\t]+/g, '\\n')\n        .replace(/[ \\t]+/g, ' ')\n\n      for (const [ key, expression ] of Object.entries(Transformation.REPLACEMENTS)) {\n        string = string.replace(Transformation.REPLACEMENTS_REGEXP[key], expression)\n      }\n    }\n\n    if (!this.inPreformattedBlock) {\n      if (this.atNoWhiteSpace) {\n        string = string.replace(/^[ \\t\\n]+/, '')\n      } else if (/^[ \\t]*\\n/.test(string)) {\n        string = string.replace(/^[ \\t\\n]+/, '\\n')\n      } else {\n        string = string.replace(/^[ \\t]+/, ' ')\n      }\n    }\n\n    if (!string) {\n      return this\n    }\n\n    this.atLeft = /\\n$/.test(string)\n    this.atNoWhiteSpace = /[ \\t\\n]$/.test(string)\n    this.atParagraph = /\\n{2}$/.test(string)\n\n    return this.append(string.replace(/\\n/g, this.left))\n  }\n\n  /**\n   * Replaces the start of the current line with the <code>string</code> provided.\n   *\n   * @param {string} string - the string to replace the start of the current line\n   * @return {Transformation} A reference to this {@link Transformation} for chaining purposes.\n   * @public\n   */\n  replaceLeft(string) {\n    if (!this.atLeft) {\n      this.append(this.left.replace(/[ ]{2,4}$/, string))\n\n      this.atLeft = true\n      this.atNoWhiteSpace = true\n      this.atParagraph = true\n    } else if (this.last) {\n      this.last = this.last.replace(/[ ]{2,4}$/, string)\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the HTML document for this {@link Transformation}.\n   *\n   * This may not be the same document as is associated with the {@link Transformer} as this document may be nested\n   * (e.g. a frame).\n   *\n   * @return {HTMLDocument} The HTML document.\n   * @public\n   */\n  get document() {\n    return this._document\n  }\n\n  /**\n   * Returns the element for this {@link Transformation}.\n   *\n   * @return {Element} The element.\n   * @public\n   */\n  get element() {\n    return this._element\n  }\n\n  /**\n   * Sets the element for this {@link Transformation} to <code>value</code>.\n   *\n   * @param {Element} value - the element to be set\n   * @public\n   */\n  set element(value) {\n    this._element = value\n    this._tagName = value && value.tagName ? value.tagName.toLowerCase() : null\n  }\n\n  /**\n   * Returns the name of the tag for this {@link Transformation}.\n   *\n   * This will be the lower case tag name.\n   *\n   * @return {string} The tag name.\n   * @public\n   */\n  get tagName() {\n    return this._tagName\n  }\n\n  /**\n   * Returns the window for this {@link Transformation}.\n   *\n   * This may not be the same window as is associated with the {@link Transformer} as this window may be nested (e.g. a\n   * frame).\n   *\n   * @return {Window} The window.\n   * @public\n   */\n  get window() {\n    return this._window\n  }\n\n  /**\n   * Sets the window for this {@link Transformation} to <code>value</code>.\n   *\n   * @param {Window} value - the window to be set\n   * @public\n   */\n  set window(value) {\n    this._window = value\n    this._document = value ? value.document : null\n  }\n\n}\n\n/**\n * A map of special characters and their replacements.\n *\n * @public\n * @static\n * @type {Object<string, string>}\n */\nTransformation.REPLACEMENTS = {\n  '\\\\\\\\': '\\\\\\\\',\n  '\\\\[': '\\\\[',\n  '\\\\]': '\\\\]',\n  '>': '\\\\>',\n  '_': '\\\\_',\n  '\\\\*': '\\\\*',\n  '`': '\\\\`',\n  '#': '\\\\#',\n  '([0-9])\\\\.(\\\\s|$)': '$1\\\\.$2',\n  '\\u00a9': '(c)',\n  '\\u00ae': '(r)',\n  '\\u2122': '(tm)',\n  '\\u00a0': ' ',\n  '\\u00b7': '\\\\*',\n  '\\u2002': ' ',\n  '\\u2003': ' ',\n  '\\u2009': ' ',\n  '\\u2018': '\\'',\n  '\\u2019': '\\'',\n  '\\u201c': '\"',\n  '\\u201d': '\"',\n  '\\u2026': '...',\n  '\\u2013': '--',\n  '\\u2014': '---'\n}\n\n/**\n * A map of special characters and the regular expression used to identify them.\n *\n * @public\n * @static\n * @type {Object<string, RegExp>}\n */\nTransformation.REPLACEMENTS_REGEXP = {}\nfor (const key of Object.keys(Transformation.REPLACEMENTS)) {\n  Transformation.REPLACEMENTS_REGEXP[key] = new RegExp(key, 'g')\n}\n\nexport default Transformation\n\n/**\n * The options for {@link Transformation}.\n *\n * @typedef {Object} Transformation~Options\n * @property {boolean} [absolute=false] - <code>true</code> if absolute URLs should be used for anchors/images;\n * otherwise <code>false</code>.\n * @property {string} [baseUri] - the base URI for the window\n * @property {boolean} [inline=false] - <code>true</code> if anchor/image URLs are to be inserted inline; otherwise\n * <code>false</code>.\n */\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Transformation from './transformation'\n\n/**\n * Transforms an HTML string or DOM element into Markdown.\n *\n * @public\n */\nclass Transformer {\n\n  /**\n   * Creates an instance of {@link Transformer} using the specified <code>window</code> and <code>plugins</code>.\n   *\n   * @param {Window} window - the <code>Window</code> to be used\n   * @param {Map<string, Plugin>} plugins - the plugins to be used\n   * @public\n   */\n  constructor(window, plugins) {\n    /**\n     * The <code>Window</code> for this {@link Transformer}.\n     *\n     * @public\n     * @type {Window}\n     */\n    this.window = window\n\n    /**\n     * The <code>HTMLDocument</code> for this {@link Transformer}.\n     *\n     * @public\n     * @type {HTMLDocument}\n     */\n    this.document = window.document\n\n    /**\n     * The plugins for this {@link Transformer}.\n     *\n     * @private\n     * @type {Map<string, Plugin>}\n     */\n    this._plugins = plugins\n  }\n\n  /**\n   * Transforms the specified <code>html</code> into Markdown using the <code>options</code> provided.\n   *\n   * <code>html</code> can either be an HTML string or a DOM element whose HTML contents are to be transformed into\n   * Markdown.\n   *\n   * @param {Element|string} html - the HTML (or element whose inner HTML) to be transformed into Markdown\n   * @param {Transformation~Options} options - the options to be used\n   * @return {string} The transformed Markdown.\n   * @public\n   */\n  transform(html, options) {\n    if (!html) {\n      return ''\n    }\n\n    let root\n    if (typeof html === 'string') {\n      root = this._document.createElement('div')\n      root.innerHTML = html\n    } else {\n      root = html\n    }\n\n    const transformation = new Transformation(this, options)\n\n    for (const plugin of this._plugins.values()) {\n      plugin.beforeAll(transformation)\n    }\n\n    this.transformElement(root, transformation)\n\n    for (const plugin of this._plugins.values()) {\n      plugin.afterAll(transformation)\n    }\n\n    return transformation.append('').buffer.trim()\n  }\n\n  /**\n   * Transforms the specified <code>element</code> and it's children into Markdown using the <code>transformation</code>\n   * provided.\n   *\n   * Nothing happens if <code>element</code> is <code>null</code> or is invisible (simplified detection used).\n   *\n   * @param {Element} element - the element to be transformed into Markdown as well as it's children\n   * @param {Transformation} transformation - the current {@link Transformation}\n   * @return {void}\n   * @public\n   */\n  transformElement(element, transformation) {\n    if (!(element && this._isVisible(element))) {\n      return\n    }\n\n    if (element.nodeType === this.window.Node.ELEMENT_NODE) {\n      transformation.element = element\n\n      const context = new Map()\n      const plugin = this._plugins.get(transformation.tagName)\n      if (plugin) {\n        transformation.pluginStack.push(plugin)\n\n        plugin.before(transformation, context)\n        plugin.transform(transformation, context)\n      }\n\n      if (!transformation.skipChildren) {\n        for (const child of Array.from(element.childNodes)) {\n          this.transformElement(child, transformation)\n        }\n      }\n\n      if (plugin) {\n        plugin.after(transformation, context)\n\n        transformation.pluginStack.pop()\n      }\n    } else if (element.nodeType === this.window.Node.TEXT_NODE) {\n      const value = element.nodeValue || ''\n\n      if (transformation.inPreformattedBlock) {\n        transformation.output(value)\n      } else if (transformation.inCodeBlock) {\n        transformation.output(value.replace(/`/g, '\\\\`'))\n      } else {\n        transformation.output(value, true)\n      }\n    }\n  }\n\n  /**\n   * Checks whether the specified <code>element</code> is currently visible.\n   *\n   * This is not a very sophisticated check and could easily be mistaken, but it should catch a lot of the most simple\n   * cases.\n   *\n   * @param {Element} element - the element whose visibility is to be checked\n   * @return {boolean} <code>true</code> if <code>element</code> is visible; otherwise <code>false</code>.\n   * @private\n   */\n  _isVisible(element) {\n    const style = this.window.getComputedStyle(element)\n\n    return style.getPropertyValue('display') !== 'none' && style.getPropertyValue('visibility') !== 'hidden'\n  }\n\n}\n\nexport default Transformer\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-empty-function: \"off\", no-unused-vars: \"off\" */\n\n/**\n * A plugin that can tap into multiple parts in the transformation process.\n *\n * @public\n */\nclass Plugin {\n\n  /**\n   * Called after {@link Plugin#transform} <b>and</b> only once all children elements have been transformed as well,\n   * provided they weren't skipped, and intended for tidying up after the transformation.\n   *\n   * <code>context</code> can be used to receive any state for a single element transformation from\n   * {@link Plugin#before} and {@link Plugin#transform}.\n   *\n   * @param {Transformation} transformation - the current {@link Transformation}\n   * @param {Map<string, *>} context - the current context for this {@link Plugin}\n   * @return {void}\n   * @public\n   */\n  after(transformation, context) {}\n\n  /**\n   * Called before any elements are transformed and intended to setup this {@link Plugin} initially.\n   *\n   * @param {Transformation} transformation - the current {@link Transformation}.\n   * @return {void}\n   * @public\n   */\n  afterAll(transformation) {}\n\n  /**\n   * Called immediately before {@link Plugin#transform} and intended for preparing this {@link Plugin} for\n   * transformation.\n   *\n   * <code>context</code> can be used to pass any state for a single element transformation to {@link Plugin#transform}\n   * and then to {@link Plugin#after}.\n   *\n   * @param {Transformation} transformation - the current {@link Transformation}\n   * @param {Map<string, *>} context - the current context for this {@link Plugin}\n   * @return {void}\n   * @public\n   */\n  before(transformation, context) {}\n\n  /**\n   * Called after all elements have been transformed and intended to completing any steps for this {@link Plugin}.\n   *\n   * @param {Transformation} transformation - the current {@link Transformation}\n   * @return {void}\n   * @public\n   */\n  beforeAll(transformation) {}\n\n  /**\n   * Transforms the current element within the specified <code>transformation</code> which can be used to provide\n   * control over the transformation.\n   *\n   * <code>context</code> can be used to pass any state for a single element transformation from {@link Plugin#before}\n   * to {@link Plugin#after}.\n   *\n   * @param {Transformation} transformation - the current {@link Transformation}\n   * @param {Map<string, *>} context - the current context for this {@link Plugin}\n   * @return {void}\n   * @public\n   */\n  transform(transformation, context) {}\n\n}\n\nexport default Plugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which extracts the URL from an anchor. Anchors without an <code>href</code> are treated as plain\n * text.\n *\n * If the <code>absolute</code> option is enabled, then the URL extracted from the anchor will be absolute. Otherwise,\n * the URL will be exactly as it is in the <code>href</code> attribute.\n *\n * If the <code>inline</code> option is enabled, then the URL (and any <code>title</code> on the anchor) will be\n * inserted immediately after the anchor contents (e.g. <code>[foo](/bar)</code>). Otherwise, all unique URL and title\n * combinations will be indexed (e.g. <code>[foo][anchor0]</code>) and the references will be output at the very end.\n *\n * @public\n * @extends {Plugin}\n */\nclass AnchorPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    if (context.has('value')) {\n      transformation.output(`]${context.get('value')}`)\n    }\n  }\n\n  /**\n   * @override\n   */\n  afterAll(transformation) {\n    if (!this._anchors.length) {\n      return\n    }\n\n    transformation.append('\\n\\n')\n\n    for (let i = 0; i < this._anchors.length; i++) {\n      transformation.append(`[anchor${i}]: ${this._anchors[i]}\\n`)\n    }\n  }\n\n  /**\n   * @override\n   */\n  beforeAll(transformation) {\n    /**\n     * The anchor values (which will contain the HREF and any title) mapped to their index.\n     *\n     * This is only used when the <code>inline</code> option is enabled.\n     *\n     * @private\n     * @type {Map<string, number>}\n     */\n    this._anchorMap = new Map()\n\n    /**\n     * The indexed anchor values.\n     *\n     * This is only used when the <code>inline</code> option is enabled.\n     *\n     * @private\n     * @type {string[]}\n     */\n    this._anchors = []\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const { element, options } = transformation\n    const href = options.absolute ? element.href : element.getAttribute('href')\n    if (!href) {\n      return\n    }\n\n    const title = element.getAttribute('title')\n    const value = title ? `${href} \"${title}\"` : href\n\n    if (options.inline) {\n      context.set('value', `(${value})`)\n    } else {\n      let index = this._anchorMap.get(value)\n      if (index == null) {\n        index = this._anchors.push(value) - 1\n\n        this._anchorMap.set(value, index)\n      }\n\n      context.set('value', `[anchor${index}]`)\n    }\n\n    transformation.output('[')\n\n    transformation.atNoWhiteSpace = true\n  }\n\n}\n\nexport default AnchorPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs the contents in a block quote.\n *\n * @public\n * @extends {Plugin}\n */\nclass BlockQuotePlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.atLeft = false\n    transformation.atParagraph = false\n    transformation.left = context.get('previousLeft')\n\n    transformation.appendParagraph()\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousLeft', transformation.left)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const value = '> '\n\n    transformation.left += value\n\n    if (transformation.atParagraph) {\n      transformation.append(value)\n    } else {\n      transformation.appendParagraph()\n    }\n  }\n\n}\n\nexport default BlockQuotePlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs an inline line break.\n *\n * @public\n * @extends {Plugin}\n */\nclass BreakPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.append(`  ${transformation.left}`)\n\n    transformation.atLeft = true\n    transformation.atNoWhiteSpace = true\n  }\n\n}\n\nexport default BreakPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs the contents in a code block.\n *\n * @public\n * @extends {Plugin}\n */\nclass CodePlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    if (!context.get('skipped')) {\n      transformation.inCodeBlock = context.get('previousInCodeBlock')\n\n      transformation.output('`')\n    }\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousInCodeBlock', transformation.inCodeBlock)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    if (transformation.inPreformattedBlock) {\n      context.set('skipped', true)\n    } else {\n      transformation.output('`')\n\n      transformation.inCodeBlock = true\n    }\n  }\n\n}\n\nexport default CodePlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs as strong text.\n *\n * @public\n * @extends {Plugin}\n */\nclass StrongPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.output('**')\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.output('**')\n\n    transformation.atNoWhiteSpace = true\n  }\n\n}\n\nexport default StrongPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport StrongPlugin from './strong'\n\n/**\n * A {@link Plugin} which outputs a definition term as strong text.\n *\n * @public\n * @extends {StrongPlugin}\n */\nclass DefinitionTermPlugin extends StrongPlugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.appendParagraph()\n\n    super.transform(transformation, context)\n  }\n\n}\n\nexport default DefinitionTermPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs a details section.\n *\n * If the details has an <code>open</code> attribute then all of its children are transformed. Otherwise, only the\n * nested <code>summary</code>, if any, will be transformed.\n *\n * @public\n * @extends {Plugin}\n */\nclass DetailsPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.skipChildren = context.get('previousSkipChildren')\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousSkipChildren', transformation.skipChildren)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const { element } = transformation\n\n    transformation.appendParagraph()\n\n    if (!element.hasAttribute('open')) {\n      transformation.skipChildren = true\n\n      const summary = element.querySelector('summary')\n      transformation.transformer.transformElement(summary, transformation)\n    }\n  }\n\n}\n\nexport default DetailsPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs as emphasised text.\n *\n * @public\n * @extends {Plugin}\n */\nclass EmphasisPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.output('_')\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.output('_')\n\n    transformation.atNoWhiteSpace = true\n  }\n\n}\n\nexport default EmphasisPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which simply ensures that all children elements are not transformed.\n *\n * @public\n * @extends {Plugin}\n */\nclass EmptyPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.skipChildren = context.get('previousSkipChildren')\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousSkipChildren', transformation.skipChildren)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.skipChildren = true\n  }\n\n}\n\nexport default EmptyPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs a heading of various levels.\n *\n * @public\n * @extends {Plugin}\n */\nclass HeadingPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const level = parseInt(transformation.tagName.match(/([1-6])$/)[1], 10)\n\n    transformation.appendParagraph()\n\n    let heading = ''\n    for (let i = 0; i < level; i++) {\n      heading += '#'\n    }\n\n    transformation.output(`${heading} `)\n  }\n\n}\n\nexport default HeadingPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs a horizontal rule.\n *\n * @public\n * @extends {Plugin}\n */\nclass HorizontalRulePlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation\n      .appendParagraph()\n      .output('---')\n      .appendParagraph()\n  }\n\n}\n\nexport default HorizontalRulePlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which extracts the URL from an image.\n *\n * If the <code>absolute</code> option is enabled, then the URL extracted from the image will be absolute. Otherwise,\n * the URL will be exactly as it is in the <code>src</code> attribute.\n *\n * If the <code>inline</code> option is enabled, then the URL will be inserted immediately after the <code>alt</code> on\n * the image (e.g. <code>![foo](/bar.png)</code>). Otherwise, all unique URLs will be indexed\n * (e.g. <code>![foo][image0]</code>) and the references will be output at the very end.\n *\n * @public\n * @extends {Plugin}\n */\nclass ImagePlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.skipChildren = context.get('previousSkipChildren')\n  }\n\n  /**\n   * @override\n   */\n  afterAll(transformation) {\n    if (!this._images.length) {\n      return\n    }\n\n    transformation.append('\\n\\n')\n\n    for (let i = 0; i < this._images.length; i++) {\n      transformation.append(`[image${i}]: ${this._images[i]}\\n`)\n    }\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousSkipChildren', transformation.skipChildren)\n  }\n\n  /**\n   * @override\n   */\n  beforeAll(transformation) {\n    /**\n     * The image values (which will contain the HREF) mapped to their index.\n     *\n     * This is only used when the <code>inline</code> option is enabled.\n     *\n     * @private\n     * @type {Map<string, number>}\n     */\n    this._imageMap = new Map()\n\n    /**\n     * The indexed image values.\n     *\n     * This is only used when the <code>inline</code> option is enabled.\n     *\n     * @private\n     * @type {string[]}\n     */\n    this._images = []\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.skipChildren = true\n\n    const { element, options } = transformation\n    const source = options.absolute ? element.src : element.getAttribute('src')\n    if (!source) {\n      return\n    }\n\n    const alternativeText = element.getAttribute('alt') || ''\n    const title = element.getAttribute('title')\n    let value = title ? `${source} \"${title}\"` : source\n\n    if (options.inline) {\n      value = `(${value})`\n    } else {\n      let index = this._imageMap.get(value)\n      if (index == null) {\n        index = this._images.push(value) - 1\n\n        this._imageMap.set(value, index)\n      }\n\n      value = `[image${index}]`\n    }\n\n    transformation.output(`![${alternativeText}]${value}`)\n  }\n\n}\n\nexport default ImagePlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Contains utility methods that are useful throughout the library.\n *\n * @public\n */\nclass Utilities {\n\n  /**\n   * Left pads the <code>string</code> provided with the given padding string for the specified number of\n   * <code>times</code>.\n   *\n   * @param {string} [string=\"\"] - the string to be padded\n   * @param {number} [times=0] - the number of times to pad <code>string</code>\n   * @param {string} [padding=\" \"] - the padding string\n   * @return {string} The padded <code>string</code>.\n   * @public\n   * @static\n   */\n  static leftPad(string = '', times = 0, padding = ' ') {\n    if (!padding) {\n      return string\n    }\n\n    for (let i = 0; i < times; i++) {\n      string = padding + string\n    }\n\n    return string\n  }\n\n  /**\n   * Throws an error indicating that the a given method on a specific class has not been implemented.\n   *\n   * @param {string} className - the name of the class on which the method has not been implemented\n   * @param {string} methodName - the name of the method which has not been implemented\n   * @return {void}\n   * @throws {Error} The error describing the class method which has not been implemented.\n   * @public\n   * @static\n   */\n  static throwUnimplemented(className, methodName) {\n    throw new Error(`\"${methodName}\" method must be implemented on the ${className} class`)\n  }\n\n}\n\nexport default Utilities\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\nimport Utilities from '../../utilities'\n\n/**\n * A {@link Plugin} which outputs a list item. The prefix for the list item will vary depending on what type of list the\n * item is contained within.\n *\n * @public\n * @extends {Plugin}\n */\nclass ListItemPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const value = transformation.inOrderedList ? `${transformation.listIndex++}. ` : '* '\n\n    if (!transformation.atLeft) {\n      transformation.append(transformation.left.replace(/[ ]{2,4}$/, '\\n'))\n\n      transformation.atLeft = true\n      transformation.atNoWhiteSpace = true\n      transformation.atParagraph = true\n    } else if (transformation.last) {\n      transformation.last = transformation.last.replace(/[ ]{2,4}$/, '\\n')\n    }\n\n    transformation.append(Utilities.leftPad(value, (transformation.listDepth - 1) * 2))\n  }\n\n}\n\nexport default ListItemPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs an ordered list.\n *\n * @public\n * @extends {Plugin}\n */\nclass OrderedListPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.inOrderedList = context.get('previousInOrderedList')\n    transformation.listIndex = context.get('previousListIndex')\n    transformation.listDepth--\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousInOrderedList', transformation.inOrderedList)\n    context.set('previousListIndex', transformation.listIndex)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    if (transformation.listDepth === 0) {\n      transformation.appendParagraph()\n    }\n\n    transformation.inOrderedList = true\n    transformation.listIndex = 1\n    transformation.listDepth++\n  }\n\n}\n\nexport default OrderedListPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs a paragraph.\n *\n * @public\n * @extends {Plugin}\n */\nclass ParagraphPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.appendParagraph()\n  }\n\n}\n\nexport default ParagraphPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs the contents in a preformatted block.\n *\n * @public\n * @extends {Plugin}\n */\nclass PreformattedPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.atLeft = false\n    transformation.atParagraph = false\n    transformation.inPreformattedBlock = context.get('previousInPreformattedBlock')\n    transformation.left = context.get('previousLeft')\n\n    transformation.appendParagraph()\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousInPreformattedBlock', transformation.inPreformattedBlock)\n    context.set('previousLeft', transformation.left)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    const value = '    '\n\n    transformation.left += value\n\n    if (transformation.atParagraph) {\n      transformation.append(value)\n    } else {\n      transformation.appendParagraph()\n    }\n  }\n\n}\n\nexport default PreformattedPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * A preset of plugins usually grouped for a specific purpose.\n *\n * @public\n */\nclass Preset {\n\n  /**\n   * Creates an instance of {@link Preset}.\n   *\n   * @public\n   */\n  constructor() {\n    /**\n     * The plugins for this {@link Preset}.\n     *\n     * @private\n     * @type {Map<string[], Plugin>}\n     */\n    this._plugins = new Map()\n  }\n\n  /**\n   * Sets the specified <code>plugin</code> for the <code>tags</code> provided.\n   *\n   * @param {string[]} tags - the tag names to which <code>plugin</code> will be registered\n   * @param {Plugin} plugin - the {@link Plugin} to be registered against <code>tags</code>\n   * @return {Preset} A reference to this {@link Preset} for chaining purposes.\n   * @public\n   */\n  set(tags, plugin) {\n    this._plugins.set(tags, plugin)\n\n    return this\n  }\n\n  /**\n   * Sets all of the specified <code>plugins</code> to be registered against their mapped tag names.\n   *\n   * @param {Map<string[], Plugin>} plugins - a <code>Map</code> of plugins and tag names to which they are\n   * to be registered\n   * @return {Preset} A reference to this {@link Preset} for chaining purposes.\n   * @public\n   */\n  setAll(plugins) {\n    for (const [ tags, plugin ] of plugins) {\n      this._plugins.set(tags, plugin)\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the plugins for this {@link Preset}.\n   *\n   * @return {Map<string[], Plugin>} The plugins.\n   * @public\n   */\n  get plugins() {\n    return new Map(this._plugins)\n  }\n\n}\n\nexport default Preset\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs as quoted text.\n *\n * @public\n * @extends {Plugin}\n */\nclass QuotePlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.output('\"')\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    transformation.output('\"')\n\n    transformation.atNoWhiteSpace = true\n  }\n\n}\n\nexport default QuotePlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Plugin from '../plugin'\n\n/**\n * A {@link Plugin} which outputs an unordered list.\n *\n * @public\n * @extends {Plugin}\n */\nclass UnorderedListPlugin extends Plugin {\n\n  /**\n   * @override\n   */\n  after(transformation, context) {\n    transformation.inOrderedList = context.get('previousInOrderedList')\n    transformation.listIndex = context.get('previousListIndex')\n    transformation.listDepth--\n  }\n\n  /**\n   * @override\n   */\n  before(transformation, context) {\n    context.set('previousInOrderedList', transformation.inOrderedList)\n    context.set('previousListIndex', transformation.listIndex)\n  }\n\n  /**\n   * @override\n   */\n  transform(transformation, context) {\n    if (transformation.listDepth === 0) {\n      transformation.appendParagraph()\n    }\n\n    transformation.inOrderedList = false\n    transformation.listIndex = 1\n    transformation.listDepth++\n  }\n\n}\n\nexport default UnorderedListPlugin\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport AnchorPlugin from '../predefined/anchor'\nimport BlockQuotePlugin from '../predefined/block-quote'\nimport BreakPlugin from '../predefined/break'\nimport CodePlugin from '../predefined/code'\nimport DefinitionTermPlugin from '../predefined/definition-term'\nimport DetailsPlugin from '../predefined/details'\nimport EmphasisPlugin from '../predefined/emphasis'\nimport EmptyPlugin from '../predefined/empty'\nimport HeadingPlugin from '../predefined/heading'\nimport HorizontalRulePlugin from '../predefined/horizontal-rule'\nimport ImagePlugin from '../predefined/image'\nimport ListItemPlugin from '../predefined/list-item'\nimport OrderedListPlugin from '../predefined/ordered-list'\nimport ParagraphPlugin from '../predefined/paragraph'\nimport PreformattedPlugin from '../predefined/preformatted'\nimport Preset from './preset'\nimport QuotePlugin from '../predefined/quote'\nimport StrongPlugin from '../predefined/strong'\nimport UnorderedListPlugin from '../predefined/unordered-list'\n\nexport default new Preset()\n  .set([ 'a' ], new AnchorPlugin())\n  .set([\n    'blockquote',\n    'dd'\n  ], new BlockQuotePlugin())\n  .set([ 'br' ], new BreakPlugin())\n  .set([\n    'code',\n    'kbd',\n    'samp'\n  ], new CodePlugin())\n  .set([ 'dt' ], new DefinitionTermPlugin())\n  .set([ 'details' ], new DetailsPlugin())\n  .set([\n    'cite',\n    'dfn',\n    'em',\n    'i',\n    'u',\n    'var'\n  ], new EmphasisPlugin())\n  .set([\n    'applet',\n    'area',\n    'audio',\n    'button',\n    'canvas',\n    'datalist',\n    'embed',\n    'head',\n    'input',\n    'map',\n    'menu',\n    'meter',\n    'noframes',\n    'noscript',\n    'object',\n    'optgroup',\n    'option',\n    'param',\n    'progress',\n    'rp',\n    'rt',\n    'ruby',\n    'script',\n    'select',\n    'style',\n    'textarea',\n    'title',\n    'video'\n  ], new EmptyPlugin())\n  .set([\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6'\n  ], new HeadingPlugin())\n  .set([ 'hr' ], new HorizontalRulePlugin())\n  .set([ 'img' ], new ImagePlugin())\n  .set([ 'li' ], new ListItemPlugin())\n  .set([ 'ol' ], new OrderedListPlugin())\n  .set([\n    'address',\n    'article',\n    'aside',\n    'div',\n    'fieldset',\n    'footer',\n    'header',\n    'nav',\n    'p',\n    'section'\n  ], new ParagraphPlugin())\n  .set([ 'pre' ], new PreformattedPlugin())\n  .set([ 'q' ], new QuotePlugin())\n  .set([\n    'b',\n    'strong'\n  ], new StrongPlugin())\n  .set([ 'ul' ], new UnorderedListPlugin())\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Transformer from './transformer'\nimport defaultPreset from './plugin/preset/default'\n\n/**\n * An HTML to Markdown transformation library that supports HTML strings and DOM elements.\n *\n * @public\n */\nclass Europa {\n\n  /**\n   * Creates an instance of {@link Europa} using the window service provided.\n   *\n   * @param {WindowService} windowService - the {@link WindowService} to be used for HTML to Markdown transformation\n   * @public\n   */\n  constructor(windowService) {\n    /**\n     * The {@link WindowService} for this {@link Europa} instance.\n     *\n     * @private\n     * @type {WindowService}\n     */\n    this._windowService = windowService\n\n    /**\n     * The <code>Window</code> to be used for HTML to Markdown transformation.\n     *\n     * @private\n     * @type {Window}\n     */\n    this._window = null\n\n    /**\n     * The plugins for this {@link Europa} instance.\n     *\n     * @private\n     * @type {Map<string, Plugin>}\n     */\n    this._plugins = new Map()\n\n    this.registerPreset(defaultPreset)\n  }\n\n  /**\n   * Destroys the <code>Window</code> used by this {@link Europa} instance.\n   *\n   * This allows closeable {@link WindowService} implementations to close the <code>Window</code> and free up resources.\n   * However, this instance can and will simply retrieve another <code>Window</code> from the {@link WindowService} the\n   * next time it is required.\n   *\n   * @return {Europa} A reference to this {@link Europa} for chaining purposes.\n   * @public\n   */\n  destroy() {\n    if (this._window) {\n      this._windowService.closeWindow(this._window)\n      this._window = null\n    }\n\n    return this\n  }\n\n  /**\n   * Registers the specified <code>plugin</code> for the <code>tags</code> provided.\n   *\n   * <code>tags</code> can be an array of tag names or a single string containing white-space separated tag names.\n   *\n   * @param {string|string[]} tags - the tag names for which <code>plugin</code> is to be registered\n   * @param {Plugin} plugin - the {@link Plugin} to be registered\n   * @return {Europa} A reference to this {@link Europa} for chaining purposes.\n   * @public\n   */\n  register(tags, plugin) {\n    if (typeof tags === 'string') {\n      tags = tags.trim().split(/\\s+/)\n    }\n\n    for (const tag of tags) {\n      this._plugins.set(tag.toLowerCase(), plugin)\n    }\n\n    return this\n  }\n\n  /**\n   * Registers all of the plugins within the specified <code>preset</code>.\n   *\n   * @param {Preset} preset - the {@link Preset} whose plugins are to be registered\n   * @return {Europa} A reference to this {@link Europa} for chaining purposes.\n   * @public\n   */\n  registerPreset(preset) {\n    for (const [ tags, plugin ] of preset.plugins) {\n      this.register(tags, plugin)\n    }\n\n    return this\n  }\n\n  /**\n   * Transforms the specified <code>html</code> into Markdown using the <code>options</code> provided.\n   *\n   * <code>html</code> can either be an HTML string or a DOM element whose HTML contents are to be transformed into\n   * Markdown.\n   *\n   * @param {Element|string} html - the HTML (or element whose inner HTML) to be transformed into Markdown\n   * @param {Transformation~Options} [options] - the options to be used\n   * @return {string} The transformed Markdown.\n   * @public\n   */\n  transform(html, options) {\n    const { window } = this\n    const transformer = new Transformer(window, this._plugins)\n\n    options = this._createTransformationOptions(options)\n\n    return transformer.transform(html, options)\n  }\n\n  /**\n   * Creates the options, including their default values, for the {@link Transformer#transform} method based on the\n   * <code>options</code> provided.\n   *\n   * @param {Transformation~Options} [options] - the options that were passed in\n   * @return {Transformation~Options} The complete options.\n   * @private\n   */\n  _createTransformationOptions(options) {\n    return Object.assign({\n      absolute: false,\n      baseUri: this._windowService.getBaseUri(this.window),\n      inline: false\n    }, options)\n  }\n\n  /**\n   * Returns the <code>Window</code> for this {@link Europa} instance.\n   *\n   * If no <code>Window</code> has been allocated, one is retrieved from the {@link WindowService} and allocated.\n   *\n   * @return {Window} The <code>Window</code>.\n   * @public\n   */\n  get window() {\n    if (this._window == null) {\n      this._window = this._windowService.getWindow()\n    }\n\n    return this._window\n  }\n\n}\n\nexport default Europa\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* eslint no-unused-vars: \"off\" */\n\nimport Utilities from '../utilities'\n\n/**\n * A service used to retrieve the <code>Window</code> object for transforming HTML to Markdown and, optionally, to close\n * it upon destruction of the {@link Europa} instance. This can be useful to free up resources as/when required in an\n * artificial browser environment.\n *\n * @public\n */\nclass WindowService {\n\n  /**\n   * Closes the specified <code>window</code> but only if this {@link WindowService} is closeable.\n   *\n   * @param {Window} window - the <code>Window</code> to be closed\n   * @return {void}\n   * @public\n   */\n  closeWindow(window) {\n    if (this.isCloseable(window)) {\n      window.close()\n    }\n  }\n\n  /**\n   * Returns the base URI for the specified <code>window</code>.\n   *\n   * Implementations <b>must</b> override this method.\n   *\n   * @param {Window} window - the <code>Window</code> for which the base URI is to be returned\n   * @return {string} The base URI for <code>window</code>.\n   * @public\n   * @abstract\n   */\n  getBaseUri(window) {\n    Utilities.throwUnimplemented('WindowService', 'getBaseUri')\n  }\n\n  /**\n   * Returns a <code>Window</code> to be used for transforming HTML to Markdown.\n   *\n   * Implementations <b>must</b> override this method.\n   *\n   * @return {Window} The <code>Window</code>.\n   * @public\n   * @abstract\n   */\n  getWindow() {\n    Utilities.throwUnimplemented('WindowService', 'getWindow')\n  }\n\n  /**\n   * Returns whether the specified <code>window</code> which was retrieved by this {@link WindowService} is closeable.\n   *\n   * @param {Window} window - the <code>Window</code> to be checked\n   * @return {boolean} <code>true</code> if <code>window</code> is closeable; otherwise <code>false</code>.\n   * @public\n   */\n  isCloseable(window) {\n    return false\n  }\n\n}\n\nexport default WindowService\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport WindowService from 'europa-core/src/service/window-service'\n\n/**\n * A very simplistic implementation of {@link WindowService} that returns the global <code>Window</code> object to be\n * used for transforming HTML into Markdown.\n *\n * @public\n * @extends {WindowService}\n */\nclass NativeWindowService extends WindowService {\n\n  /**\n   * @override\n   */\n  getBaseUri(window) {\n    return window.document.baseURI\n  }\n\n  /**\n   * @override\n   */\n  getWindow() {\n    return window\n  }\n\n}\n\nexport default NativeWindowService\n","/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Europa from 'europa-core'\n\nimport NativeWindowService from './service/native-window-service'\n\nexport default new Europa(new NativeWindowService())\n"],"names":["Transformation","transformer","options","atLeft","atNoWhiteSpace","atParagraph","buffer","inCodeBlock","inOrderedList","inPreformattedBlock","last","left","listDepth","listIndex","pluginStack","skipChildren","_document","document","_element","_tagName","_window","window","string","this","append","clean","replace","Object","entries","REPLACEMENTS","key","expression","REPLACEMENTS_REGEXP","test","value","tagName","toLowerCase","keys","RegExp","Transformer","plugins","_plugins","html","root","createElement","innerHTML","transformation","values","plugin","beforeAll","transformElement","afterAll","trim","element","_isVisible","nodeType","Node","ELEMENT_NODE","context","Map","get","push","before","transform","Array","from","childNodes","child","after","pop","TEXT_NODE","nodeValue","output","style","getComputedStyle","getPropertyValue","Plugin","AnchorPlugin","has","_anchors","length","i","_anchorMap","href","absolute","getAttribute","title","inline","set","index","BlockQuotePlugin","appendParagraph","BreakPlugin","CodePlugin","StrongPlugin","DefinitionTermPlugin","DetailsPlugin","hasAttribute","summary","querySelector","EmphasisPlugin","EmptyPlugin","HeadingPlugin","level","parseInt","match","heading","HorizontalRulePlugin","ImagePlugin","_images","_imageMap","source","src","alternativeText","Utilities","times","padding","className","methodName","Error","ListItemPlugin","leftPad","OrderedListPlugin","ParagraphPlugin","PreformattedPlugin","Preset","tags","QuotePlugin","UnorderedListPlugin","Europa","windowService","_windowService","registerPreset","defaultPreset","closeWindow","split","tag","preset","register","_createTransformationOptions","assign","getBaseUri","getWindow","WindowService","isCloseable","close","throwUnimplemented","NativeWindowService","baseURI"],"mappings":"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"}